{"ast":null,"code":"import axios from \"axios\";\nimport { SERVER_URL } from \"../../Context/constant\";\n\nconst setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common[\"X-Access-Token\"] = token;\n  } else {\n    delete axios.defaults.headers.common[\"X-Access-Token\"];\n  }\n};\n\nconst interceptorForAxios = () => {\n  axios.interceptors.request.use(config => {\n    const accessToken = localStorage.getItem(\"accessToken\");\n\n    if (accessToken) {\n      config.headers[\"x-auth-token\"] = accessToken;\n    }\n\n    return config;\n  }, error => {\n    Promise.reject(error);\n  }); //response interceptor to refresh token on receiving token expired error\n\n  axios.interceptors.response.use(response => {\n    return response;\n  }, function (error) {\n    const originalRequest = error.config;\n    let refreshToken = localStorage.getItem(\"refreshToken\");\n\n    if (refreshToken && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      return axios.post(`${SERVER_URL}/refresh_token`, {\n        refreshToken: refreshToken\n      }).then(res => {\n        if (res.status === 200) {\n          localStorage.setItem(\"accessToken\", res.data.accessToken);\n          console.log(\"Access token refreshed!\", res.data.accessToken);\n          return axios(originalRequest);\n        } else if (res.status === 500) {\n          localStorage.removeItem(\"accessToken\");\n          localStorage.removeItem(\"refreshToken\");\n          localStorage.removeItem(\"isAuthenticated\");\n          localStorage.removeItem(\"loading\");\n          localStorage.removeItem(\"user\");\n          localStorage.removeItem(\"error\");\n        }\n      });\n    } else {}\n\n    return Promise.reject(error);\n  });\n};\n\nexport default interceptorForAxios;","map":{"version":3,"names":["axios","SERVER_URL","setAuthToken","token","defaults","headers","common","interceptorForAxios","interceptors","request","use","config","accessToken","localStorage","getItem","error","Promise","reject","response","originalRequest","refreshToken","status","_retry","post","then","res","setItem","data","console","log","removeItem"],"sources":["/Users/samsamaei/Documents/Projects/falcon/src/Components/Tools/setAuthToken.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { SERVER_URL } from \"../../Context/constant\";\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"X-Access-Token\"] = token;\r\n  } else {\r\n    delete axios.defaults.headers.common[\"X-Access-Token\"];\r\n  }\r\n};\r\n\r\nconst interceptorForAxios = () => {\r\n  axios.interceptors.request.use(\r\n    (config) => {\r\n      const accessToken = localStorage.getItem(\"accessToken\");\r\n      if (accessToken) {\r\n        config.headers[\"x-auth-token\"] = accessToken;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  //response interceptor to refresh token on receiving token expired error\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    function (error) {\r\n      const originalRequest = error.config;\r\n      let refreshToken = localStorage.getItem(\"refreshToken\");\r\n\r\n      if (\r\n        refreshToken &&\r\n        error.response.status === 401 &&\r\n        !originalRequest._retry\r\n      ) {\r\n        originalRequest._retry = true;\r\n        return axios\r\n          .post(`${SERVER_URL}/refresh_token`, { refreshToken: refreshToken })\r\n          .then((res) => {\r\n            if (res.status === 200) {\r\n              localStorage.setItem(\"accessToken\", res.data.accessToken);\r\n              console.log(\"Access token refreshed!\", res.data.accessToken);\r\n              return axios(originalRequest);\r\n            }\r\n            else if (res.status === 500) {\r\n              localStorage.removeItem(\"accessToken\");\r\n              localStorage.removeItem(\"refreshToken\");\r\n              localStorage.removeItem(\"isAuthenticated\");\r\n              localStorage.removeItem(\"loading\");\r\n              localStorage.removeItem(\"user\");\r\n              localStorage.removeItem(\"error\");\r\n            }\r\n          });\r\n      } else {\r\n\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\nexport default interceptorForAxios;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAC9B,IAAIA,KAAJ,EAAW;IACTH,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,gBAA9B,IAAkDH,KAAlD;EACD,CAFD,MAEO;IACL,OAAOH,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,gBAA9B,CAAP;EACD;AACF,CAND;;AAQA,MAAMC,mBAAmB,GAAG,MAAM;EAChCP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACGC,MAAD,IAAY;IACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;;IACA,IAAIF,WAAJ,EAAiB;MACfD,MAAM,CAACN,OAAP,CAAe,cAAf,IAAiCO,WAAjC;IACD;;IACD,OAAOD,MAAP;EACD,CAPH,EAQGI,KAAD,IAAW;IACTC,OAAO,CAACC,MAAR,CAAeF,KAAf;EACD,CAVH,EADgC,CAchC;;EACAf,KAAK,CAACQ,YAAN,CAAmBU,QAAnB,CAA4BR,GAA5B,CACGQ,QAAD,IAAc;IACZ,OAAOA,QAAP;EACD,CAHH,EAIE,UAAUH,KAAV,EAAiB;IACf,MAAMI,eAAe,GAAGJ,KAAK,CAACJ,MAA9B;IACA,IAAIS,YAAY,GAAGP,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;;IAEA,IACEM,YAAY,IACZL,KAAK,CAACG,QAAN,CAAeG,MAAf,KAA0B,GAD1B,IAEA,CAACF,eAAe,CAACG,MAHnB,EAIE;MACAH,eAAe,CAACG,MAAhB,GAAyB,IAAzB;MACA,OAAOtB,KAAK,CACTuB,IADI,CACE,GAAEtB,UAAW,gBADf,EACgC;QAAEmB,YAAY,EAAEA;MAAhB,CADhC,EAEJI,IAFI,CAEEC,GAAD,IAAS;QACb,IAAIA,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;UACtBR,YAAY,CAACa,OAAb,CAAqB,aAArB,EAAoCD,GAAG,CAACE,IAAJ,CAASf,WAA7C;UACAgB,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCJ,GAAG,CAACE,IAAJ,CAASf,WAAhD;UACA,OAAOZ,KAAK,CAACmB,eAAD,CAAZ;QACD,CAJD,MAKK,IAAIM,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;UAC3BR,YAAY,CAACiB,UAAb,CAAwB,aAAxB;UACAjB,YAAY,CAACiB,UAAb,CAAwB,cAAxB;UACAjB,YAAY,CAACiB,UAAb,CAAwB,iBAAxB;UACAjB,YAAY,CAACiB,UAAb,CAAwB,SAAxB;UACAjB,YAAY,CAACiB,UAAb,CAAwB,MAAxB;UACAjB,YAAY,CAACiB,UAAb,CAAwB,OAAxB;QACD;MACF,CAhBI,CAAP;IAiBD,CAvBD,MAuBO,CAEN;;IACD,OAAOd,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;EACD,CAnCH;AAqCD,CApDD;;AAsDA,eAAeR,mBAAf"},"metadata":{},"sourceType":"module"}