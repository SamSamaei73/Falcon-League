{"ast":null,"code":"var _jsxFileName = \"/Users/samsamaei/Documents/Projects/falcon/src/Context/testState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport TestContext from \"./testContext\";\nimport TestReducer from \"./testReducer\";\nimport { SERVER_URL } from \"./constant\";\nimport interceptorForAxios from \"../Components/Tools/setAuthToken\";\nimport { CREATE_ITEM_IN_USER_SUCCESS, CREATE_ITEM_IN_USER_FAIL, GET_USER_BY_ID_SUCCESS, GET_USER_BY_ID_FAIL, SET_POPUP, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS, GET_COUNTRIES_SUCCESS, GET_COUNTRIES_FAIL, UPDATE_VERIFICATION_SUCCESS, UPDATE_VERIFICATION_FAIL, SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS, SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL, UPDATE_PASSWORD_SPECIFIC_USER_FAIL, UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS, SET_SHOW_GAME_ITEMS_SUCCESS, SET_DISPLAY_RFP_SUCCESS, CREATE_DATA_USER_SUCCESS, CREATE_DATA_USER_FAIL, SET_USERNAMEGAME, GET_GAME_ID_INFO_SUCCESS, GET_GAME_ID_INFO_FAIL, DELETE_GAME_ID_SUCCESS, DELETE_GAME_ID_FAIL, CREATE_TOURNAMENT_SUCCESS, CREATE_TOURNAMENT_FAIL, ACTIVE_TOURNAMENT_SUCCESS, ACTIVE_TOURNAMENT_FAIL, PREVIOUS_TOURNAMENT_SUCCESS, PREVIOUS_TOURNAMENT_FAIL, DELETE_TOURNAMENT_SUCCESS, DELETE_TOURNAMENT_FAIL, CREATE_REGISTER_GAME_SUCCESS, CREATE_REGISTER_GAME_FAIL, GET_REGISTER_USER_TOURNAMENT_SUCCESS, GET_REGISTER_USER_TOURNAMENT_FAIL, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAIL, SET_START_TOURNAMENT, SET_REGISTER_TOURNAMENT, SET_CREATE_TOURNAMENT, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAIL, UPDATE_USER_INFO_SUCCESS, UPDATE_USER_INFO_FAIL, SET_USER_SETTING, SET_GAME_ID_DELETED_TOURNAMENT, SET_USER_LOCATIN_TOURNAMENT, UPDATE_USER_LOCATION_SUCCESS, UPDATE_USER_LOCATIONO_FAIL, UPDATE_USER_PASSWORD_SUCCESS, UPDATE_USER_PASSWORD_FAIL, SET_USER_PASSWORD, GET_ALL_USER_FALCON_SUCCESS, GET_ALL_USER_FALCON_FAIL, SET_SWITCH_USERS, SET_PERSONAL_INFO, UPDATE_USERS_BY_ADMIN_SUCCESS, UPDATE_USERS_BY_ADMIN_FAIL, SET_EDIT_USER_SETTING, UPDATE_PASSWORD_BY_ADMIN_SUCCESS, UPDATE_PASSWORD_BY_ADMIN_FAIL, SET_EDIT_USER_PASS_SETTING, GET_TOURNAMENT_BY_ID_SUCCESS, GET_TOURNAMENT_BY_ID_FAIL, GET_RANK_POINT_TOURNAMENT_SUCCESS, GET_RANK_POINT_TOURNAMENT_FAIL, GET_PREVIOUS_TOURNAMENTS_SUCCESS, GET_PREVIOUS_TOURNAMENTS_FAIL, GET_OTHER_STATISTIC_SUCCESS, GET_OTHER_STATISTIC_FAIL, GET_FIFAUSERS_BY_TOURNAMENT_ID_SUCCESS, GET_FIFAUSERS_BY_TOURNAMENT_ID_FAIL, CREATE_TOURNAMENT_INFIFA_RESULTS_SUCCESS, CREATE_TOURNAMENT_INFIFA_RESULTS_FAIL, GET_FIFARESULTS_BY_TOURNAMENT_ID_SUCCESS, GET_FIFARESULTS_BY_TOURNAMENT_ID_FAIL, SET_GAME_ID_TAB, GET_ALL_TEAM_USERS_SUCCESS, GET_ALL_TEAM_USERS_FAIL, REGISTER_TOURNMENT_FOR_THIS_TEAM_SUCCESS, REGISTER_TOURNMENT_FOR_THIS_TEAM_FAIL, GET_USERS_OF_SPECIFIC_TEAM_SUCCESS, GET_USERS_OF_SPECIFIC_TEAM_FAIL, CONFIRM_TOURNMENT_BY_USER_SUCCESS, CONFIRM_TOURNMENT_BY_USER_FAIL, GET_ALL_TEAM_AND_MEMBERS_SUCCESS, GET_ALL_TEAM_AND_MEMBERS_FAIL } from \"./types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestState = props => {\n  _s();\n\n  interceptorForAxios();\n  const initialState = {\n    // token: localStorage.getItem(\"token\"),\n    token: localStorage.getItem(\"accessToken\"),\n    isAuthenticated: localStorage.getItem(\"isAuthenticated\"),\n    loading: localStorage.getItem(\"loading\"),\n    user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null,\n    err: localStorage.getItem(\"error\"),\n    err: null,\n    selectedDate: null,\n    createdItemInUserData: null,\n    userByIdData: null,\n    logedinUserData: null,\n    popupAlertData: null,\n    countriesData: null,\n    updateVerificationData: null,\n    sendEmailForChangePasswordData: null,\n    updatePasswordSpecificUserData: null,\n    ShowGameItem: null,\n    checkUserData: null,\n    usernameGameData: null,\n    gameIdInfoData: null,\n    // isAuthenticated: null,\n    deleteGameIdData: null,\n    // loading: false,\n    // user: null,\n    createTournamentData: null,\n    activeTournamentData: [],\n    previousTournamentData: [],\n    deletedTournamentData: null,\n    registerGameUserData: null,\n    registerForThisGameData: null,\n    startTournmentData: null,\n    setCreateTournamennull: null,\n    userInfoData: null,\n    updateUserData: null,\n    updateUserLocationData: null,\n    updateUserPasswordData: null,\n    allUserFalconData: null,\n    personalInfoData: null,\n    switchBetweenUserAndPersonalInfo: true,\n    usersEditByAdmin: null,\n    passwordEditByAdmin: null,\n    tournamentByIdData: null,\n    rankAndPoinOfTournaments: null,\n    perviousDataTournamentsUser: null,\n    otherDataStatistic: null,\n    fifaUsersByTournamentIdData: null,\n    createItemInFifaResultData: null,\n    fifaResultByTournamentIdData: null,\n    gameIdTabData: null,\n    allTeamUserData: null,\n    registerForThisTeamData: null,\n    usersOfSpecificTeamData: null,\n    confirmTournmentByUserData: null,\n    getAllTeamAndMembersData: null\n  };\n  const [state, dispatch] = useReducer(TestReducer, initialState);\n\n  const SetShowGamelItems = async (showorhide, displayStyle) => {\n    dispatch({\n      type: SET_SHOW_GAME_ITEMS_SUCCESS,\n      payload: showorhide\n    });\n    dispatch({\n      type: SET_DISPLAY_RFP_SUCCESS,\n      payload: displayStyle\n    });\n  };\n\n  const SetUsername = async data => {\n    try {\n      await dispatch({\n        type: SET_USERNAMEGAME,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetPersonalInfo = async data => {\n    try {\n      await dispatch({\n        type: SET_PERSONAL_INFO,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetSwitchUsers = async data => {\n    try {\n      await dispatch({\n        type: SET_SWITCH_USERS,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetGameIdTab = async GameId => {\n    try {\n      await dispatch({\n        type: SET_GAME_ID_TAB,\n        payload: GameId\n      });\n    } catch (err) {}\n  };\n\n  const SetPopup = async data => {\n    try {\n      await dispatch({\n        type: SET_POPUP,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetStartTournament = async data => {\n    try {\n      await dispatch({\n        type: SET_START_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserlocation = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_LOCATIN_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetRegisterTournament = async data => {\n    try {\n      await dispatch({\n        type: SET_REGISTER_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetGameIdDeletedAlert = async data => {\n    try {\n      await dispatch({\n        type: SET_GAME_ID_DELETED_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetEditUserPassByAdmin = async data => {\n    try {\n      await dispatch({\n        type: SET_EDIT_USER_PASS_SETTING,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetEditUserByAdmin = async data => {\n    try {\n      await dispatch({\n        type: SET_EDIT_USER_SETTING,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserSetting = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_SETTING,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetCreateTournmant = async data => {\n    try {\n      await dispatch({\n        type: SET_CREATE_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserPassword = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_PASSWORD,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const loadUser = async () => {\n    //  setAuthToken(localStorage.token);\n    try {\n      const res = await axios.get(SERVER_URL + \"/auth\");\n      console.log(\"auth data res\", res.data);\n      await dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  };\n\n  const CheckUserExist = async frmData => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CheckUserExist/\", frmData, config);\n      dispatch({\n        type: CREATE_DATA_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_DATA_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const CreateItemInUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CreateItemInUser/\", frmData, config);\n      dispatch({\n        type: CREATE_ITEM_IN_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_ITEM_IN_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const ConfirmTournmentByUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(SERVER_URL + \"/ConfirmTournmentByUser/\", frmData, config);\n      dispatch({\n        type: CONFIRM_TOURNMENT_BY_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CONFIRM_TOURNMENT_BY_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdatePasswordByAdmin = async frmData => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdatePasswordSpecificUser\", frmData, config);\n      dispatch({\n        type: UPDATE_PASSWORD_BY_ADMIN_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_PASSWORD_BY_ADMIN_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUsersByAdmin = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUserForAdmin\", frmData, config);\n      dispatch({\n        type: UPDATE_USERS_BY_ADMIN_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USERS_BY_ADMIN_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserPassword = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_PASSWORD_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_PASSWORD_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserLocation = async frmData => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_LOCATION_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_LOCATIONO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserInfo = async frmData => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const DeleteTournament = async frmData => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/DeleteTournament/\", frmData, config);\n      dispatch({\n        type: DELETE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: DELETE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetUserInfo = async () => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetUserInfo/\", config);\n      dispatch({\n        type: GET_USER_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_USER_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllUserFalcon = async () => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllUsers/\", config);\n      dispatch({\n        type: GET_ALL_USER_FALCON_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_ALL_USER_FALCON_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetRegisterTournment = async () => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/RegisteredTournmentsForThisUser/\", config);\n      dispatch({\n        type: GET_REGISTER_USER_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_REGISTER_USER_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetPreviousTournaments = async id => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetPreviousTournaments/\" + id, config);\n      dispatch({\n        type: PREVIOUS_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: PREVIOUS_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetOtherStatisticByUserId = async (id, GameId) => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"gameid\": GameId\n      }\n    };\n    console.log(\"otherstaticsbyuserid\", id, GameId);\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetOtherStatisticByUserId/\" + id, config);\n      dispatch({\n        type: GET_OTHER_STATISTIC_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_OTHER_STATISTIC_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetPreviousTournamentsById = async id => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetPreviousTournamentsByUserId/\" + id, config);\n      dispatch({\n        type: GET_PREVIOUS_TOURNAMENTS_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_PREVIOUS_TOURNAMENTS_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetRankAndPointOfTournament = async id => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetRankAndPointOfTournament/\" + id, config);\n      dispatch({\n        type: GET_RANK_POINT_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_RANK_POINT_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetActiveTournaments = async id => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetActiveTournaments/\" + id, config);\n      dispatch({\n        type: ACTIVE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: ACTIVE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const RegisterUserForGame = async frmData => {\n    //  setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/RegisterTournmentForThisUser/\", frmData, config);\n      dispatch({\n        type: CREATE_REGISTER_GAME_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_REGISTER_GAME_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const StartTournment = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/StartTournmentForThisUser/\", frmData, config);\n      dispatch({\n        type: START_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: START_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const CreateTournament = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CreateTournament/\", frmData, config);\n      dispatch({\n        type: CREATE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const CreateItemInFifaResult = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CreateItemInFifaResult/\", frmData, config);\n      dispatch({\n        type: CREATE_TOURNAMENT_INFIFA_RESULTS_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_TOURNAMENT_INFIFA_RESULTS_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const SendEmailForChangePassword = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/SendEmailForChangePassword/\", frmData, config);\n      dispatch({\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllUserAccounts = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllUserAccounts/\", config);\n      dispatch({\n        type: GET_GAME_ID_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_GAME_ID_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const DeleteAccountOfUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    console.log(\"delet2\", frmData);\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/DeleteAccountOfUser/\", frmData, config);\n      console.log(\"delet\", res.data);\n      dispatch({\n        type: DELETE_GAME_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: DELETE_GAME_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdatePasswordSpecificUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdatePasswordSpecificUser/\", frmData, config);\n      dispatch({\n        type: UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const RegisterTournmentForThisTeam = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/RegisterTournmentForThisTeam/\", frmData, config);\n      dispatch({\n        type: REGISTER_TOURNMENT_FOR_THIS_TEAM_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: REGISTER_TOURNMENT_FOR_THIS_TEAM_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllTeamAndMembers = async tournamentId => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"tournamentid\": tournamentId\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllTeamAndMembers\", config);\n      dispatch({\n        type: GET_ALL_TEAM_AND_MEMBERS_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_ALL_TEAM_AND_MEMBERS_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetUsersOfSpecificTeam = async tournamentId => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"tournamentid\": tournamentId\n      }\n    };\n\n    try {\n      dispatch({\n        type: GET_USERS_OF_SPECIFIC_TEAM_SUCCESS,\n        payload: null\n      });\n      const res = await axios.get(SERVER_URL + \"/GetUsersOfSpecificTeam\", config);\n      dispatch({\n        type: GET_USERS_OF_SPECIFIC_TEAM_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_USERS_OF_SPECIFIC_TEAM_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetUserInfoById = async id => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        id: id\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetLoggedInUser/\", config);\n      dispatch({\n        type: GET_USER_BY_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_USER_BY_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetTournamentById = async id => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetTournamentById/\" + id, config);\n      dispatch({\n        type: GET_TOURNAMENT_BY_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_TOURNAMENT_BY_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllTeamUsers = async tournamentId => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"tournamentid\": tournamentId\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllTeamUsers\", config);\n      dispatch({\n        type: GET_ALL_TEAM_USERS_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_ALL_TEAM_USERS_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetFifaUsersByTournamentId = async id => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetFifaUsersByTournamentId/\" + id, config);\n      dispatch({\n        type: GET_FIFAUSERS_BY_TOURNAMENT_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_FIFAUSERS_BY_TOURNAMENT_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetFifaResultByTournamentId = async id => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetFifaResultByTournamentId/\" + id, config);\n      dispatch({\n        type: GET_FIFARESULTS_BY_TOURNAMENT_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_FIFARESULTS_BY_TOURNAMENT_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetCountries = async () => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetCountries/\", config);\n      dispatch({\n        type: GET_COUNTRIES_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_COUNTRIES_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateVerification = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateVerification\", formData, config);\n      dispatch({\n        type: UPDATE_VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: UPDATE_VERIFICATION_FAIL,\n        payload: err.response\n      });\n    }\n  }; // Login User\n\n\n  const login = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/login\", formData, config);\n      console.log(\"login:\", res.data.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      console.log(\"loginerror:\", err);\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response\n      });\n    }\n  }; // Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear Errors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  return /*#__PURE__*/_jsxDEV(TestContext.Provider, {\n    value: {\n      token: state.token,\n      err: state.err,\n      createdItemInUserData: state.createdItemInUserData,\n      userByIdData: state.userByIdData,\n      logedinUserData: state.logedinUserData,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      popupAlertData: state.popupAlertData,\n      countriesData: state.countriesData,\n      updateVerificationData: state.updateVerificationData,\n      sendEmailForChangePasswordData: state.sendEmailForChangePasswordData,\n      updatePasswordSpecificUserData: state.updatePasswordSpecificUserData,\n      ShowGameItem: state.ShowGameItem,\n      checkUserData: state.checkUserData,\n      usernameGameData: state.usernameGameData,\n      gameIdInfoData: state.gameIdInfoData,\n      deleteGameIdData: state.deleteGameIdData,\n      createTournamentData: state.createTournamentData,\n      activeTournamentData: state.activeTournamentData,\n      previousTournamentData: state.previousTournamentData,\n      deletedTournamentData: state.deletedTournamentData,\n      registerGameUserData: state.registerGameUserData,\n      registerForThisGameData: state.registerForThisGameData,\n      startTournmentData: state.startTournmentData,\n      setCreateTournamennull: state.setCreateTournamennull,\n      userInfoData: state.userInfoData,\n      updateUserData: state.updateUserData,\n      updateUserLocationData: state.updateUserLocationData,\n      updateUserPasswordData: state.updateUserPasswordData,\n      allUserFalconData: state.allUserFalconData,\n      switchBetweenUserAndPersonalInfo: state.switchBetweenUserAndPersonalInfo,\n      personalInfoData: state.personalInfoData,\n      usersEditByAdmin: state.usersEditByAdmin,\n      passwordEditByAdmin: state.passwordEditByAdmin,\n      tournamentByIdData: state.tournamentByIdData,\n      rankAndPoinOfTournaments: state.rankAndPoinOfTournaments,\n      perviousDataTournamentsUser: state.perviousDataTournamentsUser,\n      otherDataStatistic: state.otherDataStatistic,\n      fifaUsersByTournamentIdData: state.fifaUsersByTournamentIdData,\n      createItemInFifaResultData: state.createItemInFifaResultData,\n      fifaResultByTournamentIdData: state.fifaResultByTournamentIdData,\n      gameIdTabData: state.gameIdTabData,\n      allTeamUserData: state.allTeamUserData,\n      registerForThisTeamData: state.registerForThisTeamData,\n      usersOfSpecificTeamData: state.usersOfSpecificTeamData,\n      confirmTournmentByUserData: state.confirmTournmentByUserData,\n      getAllTeamAndMembersData: state.getAllTeamAndMembersData,\n      CreateItemInUser,\n      GetUserInfoById,\n      login,\n      loadUser,\n      logout,\n      clearErrors,\n      GetAllUserAccounts,\n      SetPopup,\n      GetCountries,\n      UpdateVerification,\n      SendEmailForChangePassword,\n      UpdatePasswordSpecificUser,\n      SetShowGamelItems,\n      CheckUserExist,\n      SetUsername,\n      DeleteAccountOfUser,\n      CreateTournament,\n      GetActiveTournaments,\n      GetPreviousTournaments,\n      DeleteTournament,\n      RegisterUserForGame,\n      GetRegisterTournment,\n      StartTournment,\n      SetStartTournament,\n      SetRegisterTournament,\n      SetCreateTournmant,\n      GetUserInfo,\n      UpdateUserInfo,\n      SetUserSetting,\n      SetGameIdDeletedAlert,\n      SetUserlocation,\n      UpdateUserLocation,\n      UpdateUserPassword,\n      SetUserPassword,\n      GetAllUserFalcon,\n      SetSwitchUsers,\n      SetPersonalInfo,\n      UpdateUsersByAdmin,\n      SetEditUserByAdmin,\n      UpdatePasswordByAdmin,\n      SetEditUserPassByAdmin,\n      GetTournamentById,\n      GetRankAndPointOfTournament,\n      GetPreviousTournamentsById,\n      GetOtherStatisticByUserId,\n      GetFifaUsersByTournamentId,\n      CreateItemInFifaResult,\n      GetFifaResultByTournamentId,\n      SetGameIdTab,\n      GetAllTeamUsers,\n      RegisterTournmentForThisTeam,\n      GetUsersOfSpecificTeam,\n      ConfirmTournmentByUser,\n      GetAllTeamAndMembers\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1231,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TestState;\nexport default TestState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestState\");","map":{"version":3,"names":["React","useReducer","axios","TestContext","TestReducer","SERVER_URL","interceptorForAxios","CREATE_ITEM_IN_USER_SUCCESS","CREATE_ITEM_IN_USER_FAIL","GET_USER_BY_ID_SUCCESS","GET_USER_BY_ID_FAIL","SET_POPUP","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","GET_COUNTRIES_SUCCESS","GET_COUNTRIES_FAIL","UPDATE_VERIFICATION_SUCCESS","UPDATE_VERIFICATION_FAIL","SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS","SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL","UPDATE_PASSWORD_SPECIFIC_USER_FAIL","UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS","SET_SHOW_GAME_ITEMS_SUCCESS","SET_DISPLAY_RFP_SUCCESS","CREATE_DATA_USER_SUCCESS","CREATE_DATA_USER_FAIL","SET_USERNAMEGAME","GET_GAME_ID_INFO_SUCCESS","GET_GAME_ID_INFO_FAIL","DELETE_GAME_ID_SUCCESS","DELETE_GAME_ID_FAIL","CREATE_TOURNAMENT_SUCCESS","CREATE_TOURNAMENT_FAIL","ACTIVE_TOURNAMENT_SUCCESS","ACTIVE_TOURNAMENT_FAIL","PREVIOUS_TOURNAMENT_SUCCESS","PREVIOUS_TOURNAMENT_FAIL","DELETE_TOURNAMENT_SUCCESS","DELETE_TOURNAMENT_FAIL","CREATE_REGISTER_GAME_SUCCESS","CREATE_REGISTER_GAME_FAIL","GET_REGISTER_USER_TOURNAMENT_SUCCESS","GET_REGISTER_USER_TOURNAMENT_FAIL","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAIL","SET_START_TOURNAMENT","SET_REGISTER_TOURNAMENT","SET_CREATE_TOURNAMENT","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAIL","UPDATE_USER_INFO_SUCCESS","UPDATE_USER_INFO_FAIL","SET_USER_SETTING","SET_GAME_ID_DELETED_TOURNAMENT","SET_USER_LOCATIN_TOURNAMENT","UPDATE_USER_LOCATION_SUCCESS","UPDATE_USER_LOCATIONO_FAIL","UPDATE_USER_PASSWORD_SUCCESS","UPDATE_USER_PASSWORD_FAIL","SET_USER_PASSWORD","GET_ALL_USER_FALCON_SUCCESS","GET_ALL_USER_FALCON_FAIL","SET_SWITCH_USERS","SET_PERSONAL_INFO","UPDATE_USERS_BY_ADMIN_SUCCESS","UPDATE_USERS_BY_ADMIN_FAIL","SET_EDIT_USER_SETTING","UPDATE_PASSWORD_BY_ADMIN_SUCCESS","UPDATE_PASSWORD_BY_ADMIN_FAIL","SET_EDIT_USER_PASS_SETTING","GET_TOURNAMENT_BY_ID_SUCCESS","GET_TOURNAMENT_BY_ID_FAIL","GET_RANK_POINT_TOURNAMENT_SUCCESS","GET_RANK_POINT_TOURNAMENT_FAIL","GET_PREVIOUS_TOURNAMENTS_SUCCESS","GET_PREVIOUS_TOURNAMENTS_FAIL","GET_OTHER_STATISTIC_SUCCESS","GET_OTHER_STATISTIC_FAIL","GET_FIFAUSERS_BY_TOURNAMENT_ID_SUCCESS","GET_FIFAUSERS_BY_TOURNAMENT_ID_FAIL","CREATE_TOURNAMENT_INFIFA_RESULTS_SUCCESS","CREATE_TOURNAMENT_INFIFA_RESULTS_FAIL","GET_FIFARESULTS_BY_TOURNAMENT_ID_SUCCESS","GET_FIFARESULTS_BY_TOURNAMENT_ID_FAIL","SET_GAME_ID_TAB","GET_ALL_TEAM_USERS_SUCCESS","GET_ALL_TEAM_USERS_FAIL","REGISTER_TOURNMENT_FOR_THIS_TEAM_SUCCESS","REGISTER_TOURNMENT_FOR_THIS_TEAM_FAIL","GET_USERS_OF_SPECIFIC_TEAM_SUCCESS","GET_USERS_OF_SPECIFIC_TEAM_FAIL","CONFIRM_TOURNMENT_BY_USER_SUCCESS","CONFIRM_TOURNMENT_BY_USER_FAIL","GET_ALL_TEAM_AND_MEMBERS_SUCCESS","GET_ALL_TEAM_AND_MEMBERS_FAIL","TestState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","JSON","parse","err","selectedDate","createdItemInUserData","userByIdData","logedinUserData","popupAlertData","countriesData","updateVerificationData","sendEmailForChangePasswordData","updatePasswordSpecificUserData","ShowGameItem","checkUserData","usernameGameData","gameIdInfoData","deleteGameIdData","createTournamentData","activeTournamentData","previousTournamentData","deletedTournamentData","registerGameUserData","registerForThisGameData","startTournmentData","setCreateTournamennull","userInfoData","updateUserData","updateUserLocationData","updateUserPasswordData","allUserFalconData","personalInfoData","switchBetweenUserAndPersonalInfo","usersEditByAdmin","passwordEditByAdmin","tournamentByIdData","rankAndPoinOfTournaments","perviousDataTournamentsUser","otherDataStatistic","fifaUsersByTournamentIdData","createItemInFifaResultData","fifaResultByTournamentIdData","gameIdTabData","allTeamUserData","registerForThisTeamData","usersOfSpecificTeamData","confirmTournmentByUserData","getAllTeamAndMembersData","state","dispatch","SetShowGamelItems","showorhide","displayStyle","type","payload","SetUsername","data","SetPersonalInfo","SetSwitchUsers","SetGameIdTab","GameId","SetPopup","SetStartTournament","SetUserlocation","SetRegisterTournament","SetGameIdDeletedAlert","SetEditUserPassByAdmin","SetEditUserByAdmin","SetUserSetting","SetCreateTournmant","SetUserPassword","loadUser","res","get","console","log","CheckUserExist","frmData","config","headers","post","CreateItemInUser","ConfirmTournmentByUser","put","UpdatePasswordByAdmin","UpdateUsersByAdmin","UpdateUserPassword","UpdateUserLocation","UpdateUserInfo","DeleteTournament","GetUserInfo","GetAllUserFalcon","GetRegisterTournment","GetPreviousTournaments","id","GetOtherStatisticByUserId","GetPreviousTournamentsById","GetRankAndPointOfTournament","GetActiveTournaments","RegisterUserForGame","StartTournment","CreateTournament","CreateItemInFifaResult","SendEmailForChangePassword","GetAllUserAccounts","DeleteAccountOfUser","UpdatePasswordSpecificUser","RegisterTournmentForThisTeam","GetAllTeamAndMembers","tournamentId","GetUsersOfSpecificTeam","GetUserInfoById","GetTournamentById","GetAllTeamUsers","GetFifaUsersByTournamentId","GetFifaResultByTournamentId","GetCountries","UpdateVerification","formData","response","login","logout","clearErrors","children"],"sources":["/Users/samsamaei/Documents/Projects/falcon/src/Context/testState.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport TestContext from \"./testContext\";\r\nimport TestReducer from \"./testReducer\";\r\nimport { SERVER_URL } from \"./constant\";\r\nimport interceptorForAxios from \"../Components/Tools/setAuthToken\";\r\nimport {\r\n  CREATE_ITEM_IN_USER_SUCCESS,\r\n  CREATE_ITEM_IN_USER_FAIL,\r\n  GET_USER_BY_ID_SUCCESS,\r\n  GET_USER_BY_ID_FAIL,\r\n  SET_POPUP,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_ERRORS,\r\n  GET_COUNTRIES_SUCCESS,\r\n  GET_COUNTRIES_FAIL,\r\n  UPDATE_VERIFICATION_SUCCESS,\r\n  UPDATE_VERIFICATION_FAIL,\r\n  SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\r\n  SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\r\n  UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\r\n  UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\r\n  SET_SHOW_GAME_ITEMS_SUCCESS,\r\n  SET_DISPLAY_RFP_SUCCESS,\r\n  CREATE_DATA_USER_SUCCESS,\r\n  CREATE_DATA_USER_FAIL,\r\n  SET_USERNAMEGAME,\r\n  GET_GAME_ID_INFO_SUCCESS,\r\n  GET_GAME_ID_INFO_FAIL,\r\n  DELETE_GAME_ID_SUCCESS,\r\n  DELETE_GAME_ID_FAIL,\r\n  CREATE_TOURNAMENT_SUCCESS,\r\n  CREATE_TOURNAMENT_FAIL,\r\n  ACTIVE_TOURNAMENT_SUCCESS,\r\n  ACTIVE_TOURNAMENT_FAIL,\r\n  PREVIOUS_TOURNAMENT_SUCCESS,\r\n  PREVIOUS_TOURNAMENT_FAIL,\r\n  DELETE_TOURNAMENT_SUCCESS,\r\n  DELETE_TOURNAMENT_FAIL,\r\n  CREATE_REGISTER_GAME_SUCCESS,\r\n  CREATE_REGISTER_GAME_FAIL,\r\n  GET_REGISTER_USER_TOURNAMENT_SUCCESS,\r\n  GET_REGISTER_USER_TOURNAMENT_FAIL,\r\n  START_TOURNAMENT_SUCCESS,\r\n  START_TOURNAMENT_FAIL,\r\n  SET_START_TOURNAMENT,\r\n  SET_REGISTER_TOURNAMENT,\r\n  SET_CREATE_TOURNAMENT,\r\n  GET_USER_INFO_SUCCESS,\r\n  GET_USER_INFO_FAIL,\r\n  UPDATE_USER_INFO_SUCCESS,\r\n  UPDATE_USER_INFO_FAIL,\r\n  SET_USER_SETTING,\r\n  SET_GAME_ID_DELETED_TOURNAMENT,\r\n  SET_USER_LOCATIN_TOURNAMENT,\r\n  UPDATE_USER_LOCATION_SUCCESS,\r\n  UPDATE_USER_LOCATIONO_FAIL,\r\n  UPDATE_USER_PASSWORD_SUCCESS,\r\n  UPDATE_USER_PASSWORD_FAIL,\r\n  SET_USER_PASSWORD,\r\n  GET_ALL_USER_FALCON_SUCCESS,\r\n  GET_ALL_USER_FALCON_FAIL,\r\n  SET_SWITCH_USERS,\r\n  SET_PERSONAL_INFO,\r\n  UPDATE_USERS_BY_ADMIN_SUCCESS,\r\n  UPDATE_USERS_BY_ADMIN_FAIL,\r\n  SET_EDIT_USER_SETTING,\r\n  UPDATE_PASSWORD_BY_ADMIN_SUCCESS,\r\n  UPDATE_PASSWORD_BY_ADMIN_FAIL,\r\n  SET_EDIT_USER_PASS_SETTING,\r\n  GET_TOURNAMENT_BY_ID_SUCCESS,\r\n  GET_TOURNAMENT_BY_ID_FAIL,\r\n  GET_RANK_POINT_TOURNAMENT_SUCCESS,\r\n  GET_RANK_POINT_TOURNAMENT_FAIL,\r\n  GET_PREVIOUS_TOURNAMENTS_SUCCESS,\r\n  GET_PREVIOUS_TOURNAMENTS_FAIL,\r\n  GET_OTHER_STATISTIC_SUCCESS,\r\n  GET_OTHER_STATISTIC_FAIL,\r\n  GET_FIFAUSERS_BY_TOURNAMENT_ID_SUCCESS,\r\n  GET_FIFAUSERS_BY_TOURNAMENT_ID_FAIL,\r\n  CREATE_TOURNAMENT_INFIFA_RESULTS_SUCCESS,\r\n  CREATE_TOURNAMENT_INFIFA_RESULTS_FAIL,\r\n  GET_FIFARESULTS_BY_TOURNAMENT_ID_SUCCESS,\r\n  GET_FIFARESULTS_BY_TOURNAMENT_ID_FAIL,\r\n  SET_GAME_ID_TAB,\r\n  GET_ALL_TEAM_USERS_SUCCESS,\r\n  GET_ALL_TEAM_USERS_FAIL,\r\n  REGISTER_TOURNMENT_FOR_THIS_TEAM_SUCCESS,\r\n  REGISTER_TOURNMENT_FOR_THIS_TEAM_FAIL,\r\n  GET_USERS_OF_SPECIFIC_TEAM_SUCCESS,\r\n  GET_USERS_OF_SPECIFIC_TEAM_FAIL,\r\n  CONFIRM_TOURNMENT_BY_USER_SUCCESS,\r\n  CONFIRM_TOURNMENT_BY_USER_FAIL,\r\n  GET_ALL_TEAM_AND_MEMBERS_SUCCESS,\r\n  GET_ALL_TEAM_AND_MEMBERS_FAIL,\r\n} from \"./types\";\r\n\r\nconst TestState = (props) => {\r\n  interceptorForAxios();\r\n  const initialState = {\r\n    // token: localStorage.getItem(\"token\"),\r\n\r\n    token: localStorage.getItem(\"accessToken\"),\r\n    isAuthenticated: localStorage.getItem(\"isAuthenticated\"),\r\n    loading: localStorage.getItem(\"loading\"),\r\n    user: localStorage.getItem(\"user\")\r\n      ? JSON.parse(localStorage.getItem(\"user\"))\r\n      : null,\r\n    err: localStorage.getItem(\"error\"),\r\n\r\n    err: null,\r\n    selectedDate: null,\r\n    createdItemInUserData: null,\r\n    userByIdData: null,\r\n    logedinUserData: null,\r\n    popupAlertData: null,\r\n    countriesData: null,\r\n    updateVerificationData: null,\r\n    sendEmailForChangePasswordData: null,\r\n    updatePasswordSpecificUserData: null,\r\n    ShowGameItem: null,\r\n    checkUserData: null,\r\n    usernameGameData: null,\r\n    gameIdInfoData: null,\r\n    // isAuthenticated: null,\r\n    deleteGameIdData: null,\r\n    // loading: false,\r\n    // user: null,\r\n    createTournamentData: null,\r\n    activeTournamentData: [],\r\n    previousTournamentData: [],\r\n    deletedTournamentData: null,\r\n    registerGameUserData: null,\r\n    registerForThisGameData: null,\r\n    startTournmentData: null,\r\n    setCreateTournamennull: null,\r\n    userInfoData: null,\r\n    updateUserData: null,\r\n    updateUserLocationData: null,\r\n    updateUserPasswordData: null,\r\n    allUserFalconData: null,\r\n    personalInfoData: null,\r\n    switchBetweenUserAndPersonalInfo: true,\r\n    usersEditByAdmin: null,\r\n    passwordEditByAdmin: null,\r\n    tournamentByIdData: null,\r\n    rankAndPoinOfTournaments: null,\r\n    perviousDataTournamentsUser: null,\r\n    otherDataStatistic: null,\r\n    fifaUsersByTournamentIdData: null,\r\n    createItemInFifaResultData: null,\r\n    fifaResultByTournamentIdData: null,\r\n    gameIdTabData: null,\r\n    allTeamUserData: null,\r\n    registerForThisTeamData: null,\r\n    usersOfSpecificTeamData: null,\r\n    confirmTournmentByUserData: null,\r\n    getAllTeamAndMembersData: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TestReducer, initialState);\r\n  const SetShowGamelItems = async (showorhide, displayStyle) => {\r\n    dispatch({\r\n      type: SET_SHOW_GAME_ITEMS_SUCCESS,\r\n      payload: showorhide,\r\n    });\r\n\r\n    dispatch({\r\n      type: SET_DISPLAY_RFP_SUCCESS,\r\n      payload: displayStyle,\r\n    });\r\n  };\r\n  const SetUsername = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USERNAMEGAME,\r\n        payload: data,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetPersonalInfo = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_PERSONAL_INFO,\r\n        payload: data,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetSwitchUsers = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_SWITCH_USERS,\r\n        payload: data,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetGameIdTab = async (GameId) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_GAME_ID_TAB,\r\n        payload: GameId,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetPopup = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_POPUP,\r\n        payload: data,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetStartTournament = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_START_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetUserlocation = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_LOCATIN_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetRegisterTournament = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_REGISTER_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetGameIdDeletedAlert = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_GAME_ID_DELETED_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetEditUserPassByAdmin = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_EDIT_USER_PASS_SETTING,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetEditUserByAdmin = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_EDIT_USER_SETTING,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetUserSetting = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_SETTING,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const SetCreateTournmant = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_CREATE_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n  const SetUserPassword = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_PASSWORD,\r\n        payload: null,\r\n      });\r\n    } catch (err) { }\r\n  };\r\n\r\n  const loadUser = async () => {\r\n    //  setAuthToken(localStorage.token);\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/auth\");\r\n      console.log(\"auth data res\", res.data);\r\n      await dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({ type: AUTH_ERROR });\r\n    }\r\n  };\r\n  const CheckUserExist = async (frmData) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CheckUserExist/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_DATA_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_DATA_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const CreateItemInUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CreateItemInUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_ITEM_IN_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_ITEM_IN_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const ConfirmTournmentByUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.put(\r\n        SERVER_URL + \"/ConfirmTournmentByUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CONFIRM_TOURNMENT_BY_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CONFIRM_TOURNMENT_BY_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdatePasswordByAdmin = async (frmData) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdatePasswordSpecificUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_BY_ADMIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_BY_ADMIN_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUsersByAdmin = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUserForAdmin\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USERS_BY_ADMIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USERS_BY_ADMIN_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserPassword = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_PASSWORD_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_PASSWORD_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserLocation = async (frmData) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_LOCATION_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_LOCATIONO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserInfo = async (frmData) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const DeleteTournament = async (frmData) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/DeleteTournament/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: DELETE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n\r\n  const GetUserInfo = async () => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetUserInfo/\", config);\r\n      dispatch({\r\n        type: GET_USER_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_USER_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllUserFalcon = async () => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetAllUsers/\", config);\r\n      dispatch({\r\n        type: GET_ALL_USER_FALCON_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_ALL_USER_FALCON_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetRegisterTournment = async () => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/RegisteredTournmentsForThisUser/\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_REGISTER_USER_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_REGISTER_USER_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetPreviousTournaments = async (id) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetPreviousTournaments/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: PREVIOUS_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PREVIOUS_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetOtherStatisticByUserId = async (id, GameId) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"gameid\": GameId\r\n      },\r\n    };\r\n    console.log(\"otherstaticsbyuserid\", id, GameId);\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetOtherStatisticByUserId/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_OTHER_STATISTIC_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_OTHER_STATISTIC_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetPreviousTournamentsById = async (id) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetPreviousTournamentsByUserId/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_PREVIOUS_TOURNAMENTS_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_PREVIOUS_TOURNAMENTS_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetRankAndPointOfTournament = async (id) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetRankAndPointOfTournament/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_RANK_POINT_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_RANK_POINT_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetActiveTournaments = async (id) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetActiveTournaments/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: ACTIVE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: ACTIVE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const RegisterUserForGame = async (frmData) => {\r\n    //  setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/RegisterTournmentForThisUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_REGISTER_GAME_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_REGISTER_GAME_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const StartTournment = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/StartTournmentForThisUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: START_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: START_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const CreateTournament = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CreateTournament/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const CreateItemInFifaResult = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CreateItemInFifaResult/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_INFIFA_RESULTS_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_INFIFA_RESULTS_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const SendEmailForChangePassword = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/SendEmailForChangePassword/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllUserAccounts = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetAllUserAccounts/\", config);\r\n      dispatch({\r\n        type: GET_GAME_ID_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_GAME_ID_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const DeleteAccountOfUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    console.log(\"delet2\", frmData);\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/DeleteAccountOfUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      console.log(\"delet\", res.data);\r\n      dispatch({\r\n        type: DELETE_GAME_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_GAME_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdatePasswordSpecificUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdatePasswordSpecificUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const RegisterTournmentForThisTeam = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/RegisterTournmentForThisTeam/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: REGISTER_TOURNMENT_FOR_THIS_TEAM_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: REGISTER_TOURNMENT_FOR_THIS_TEAM_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllTeamAndMembers = async (tournamentId) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"tournamentid\": tournamentId\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetAllTeamAndMembers\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_ALL_TEAM_AND_MEMBERS_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_ALL_TEAM_AND_MEMBERS_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetUsersOfSpecificTeam = async (tournamentId) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"tournamentid\": tournamentId\r\n      },\r\n    };\r\n\r\n    try {\r\n      dispatch({\r\n        type: GET_USERS_OF_SPECIFIC_TEAM_SUCCESS,\r\n        payload: null,\r\n      });\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetUsersOfSpecificTeam\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_USERS_OF_SPECIFIC_TEAM_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_USERS_OF_SPECIFIC_TEAM_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetUserInfoById = async (id) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        id: id,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetLoggedInUser/\", config);\r\n      dispatch({\r\n        type: GET_USER_BY_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_USER_BY_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetTournamentById = async (id) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetTournamentById/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_TOURNAMENT_BY_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_TOURNAMENT_BY_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllTeamUsers = async (tournamentId) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"tournamentid\": tournamentId\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetAllTeamUsers\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_ALL_TEAM_USERS_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_ALL_TEAM_USERS_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetFifaUsersByTournamentId = async (id) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetFifaUsersByTournamentId/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_FIFAUSERS_BY_TOURNAMENT_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_FIFAUSERS_BY_TOURNAMENT_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetFifaResultByTournamentId = async (id) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetFifaResultByTournamentId/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_FIFARESULTS_BY_TOURNAMENT_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_FIFARESULTS_BY_TOURNAMENT_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetCountries = async () => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetCountries/\", config);\r\n      dispatch({\r\n        type: GET_COUNTRIES_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_COUNTRIES_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateVerification = async (formData) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateVerification\",\r\n        formData,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: UPDATE_VERIFICATION_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      loadUser();\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_VERIFICATION_FAIL,\r\n        payload: err.response,\r\n      });\r\n    }\r\n  };\r\n  // Login User\r\n  const login = async (formData) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(SERVER_URL + \"/login\", formData, config);\r\n      console.log(\"login:\", res.data.token);\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      loadUser();\r\n    } catch (err) {\r\n      console.log(\"loginerror:\", err);\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n        payload: err.response,\r\n      });\r\n    }\r\n  };\r\n  // Logout\r\n  const logout = () => dispatch({ type: LOGOUT });\r\n  // Clear Errors\r\n  const clearErrors = () => dispatch({ type: CLEAR_ERRORS });\r\n\r\n  return (\r\n    <TestContext.Provider\r\n      value={{\r\n        token: state.token,\r\n        err: state.err,\r\n        createdItemInUserData: state.createdItemInUserData,\r\n        userByIdData: state.userByIdData,\r\n        logedinUserData: state.logedinUserData,\r\n        isAuthenticated: state.isAuthenticated,\r\n        loading: state.loading,\r\n        user: state.user,\r\n        popupAlertData: state.popupAlertData,\r\n        countriesData: state.countriesData,\r\n        updateVerificationData: state.updateVerificationData,\r\n        sendEmailForChangePasswordData: state.sendEmailForChangePasswordData,\r\n        updatePasswordSpecificUserData: state.updatePasswordSpecificUserData,\r\n        ShowGameItem: state.ShowGameItem,\r\n        checkUserData: state.checkUserData,\r\n        usernameGameData: state.usernameGameData,\r\n        gameIdInfoData: state.gameIdInfoData,\r\n        deleteGameIdData: state.deleteGameIdData,\r\n        createTournamentData: state.createTournamentData,\r\n        activeTournamentData: state.activeTournamentData,\r\n        previousTournamentData: state.previousTournamentData,\r\n        deletedTournamentData: state.deletedTournamentData,\r\n        registerGameUserData: state.registerGameUserData,\r\n        registerForThisGameData: state.registerForThisGameData,\r\n        startTournmentData: state.startTournmentData,\r\n        setCreateTournamennull: state.setCreateTournamennull,\r\n        userInfoData: state.userInfoData,\r\n        updateUserData: state.updateUserData,\r\n        updateUserLocationData: state.updateUserLocationData,\r\n        updateUserPasswordData: state.updateUserPasswordData,\r\n        allUserFalconData: state.allUserFalconData,\r\n        switchBetweenUserAndPersonalInfo:\r\n          state.switchBetweenUserAndPersonalInfo,\r\n        personalInfoData: state.personalInfoData,\r\n        usersEditByAdmin: state.usersEditByAdmin,\r\n        passwordEditByAdmin: state.passwordEditByAdmin,\r\n        tournamentByIdData: state.tournamentByIdData,\r\n        rankAndPoinOfTournaments: state.rankAndPoinOfTournaments,\r\n        perviousDataTournamentsUser: state.perviousDataTournamentsUser,\r\n        otherDataStatistic: state.otherDataStatistic,\r\n        fifaUsersByTournamentIdData: state.fifaUsersByTournamentIdData,\r\n        createItemInFifaResultData: state.createItemInFifaResultData,\r\n        fifaResultByTournamentIdData: state.fifaResultByTournamentIdData,\r\n        gameIdTabData: state.gameIdTabData,\r\n        allTeamUserData: state.allTeamUserData,\r\n        registerForThisTeamData: state.registerForThisTeamData,\r\n        usersOfSpecificTeamData: state.usersOfSpecificTeamData,\r\n        confirmTournmentByUserData: state.confirmTournmentByUserData,\r\n        getAllTeamAndMembersData: state.getAllTeamAndMembersData,\r\n\r\n        CreateItemInUser,\r\n        GetUserInfoById,\r\n        login,\r\n        loadUser,\r\n        logout,\r\n        clearErrors,\r\n        GetAllUserAccounts,\r\n        SetPopup,\r\n        GetCountries,\r\n        UpdateVerification,\r\n        SendEmailForChangePassword,\r\n        UpdatePasswordSpecificUser,\r\n        SetShowGamelItems,\r\n        CheckUserExist,\r\n        SetUsername,\r\n        DeleteAccountOfUser,\r\n        CreateTournament,\r\n        GetActiveTournaments,\r\n        GetPreviousTournaments,\r\n        DeleteTournament,\r\n        RegisterUserForGame,\r\n        GetRegisterTournment,\r\n        StartTournment,\r\n        SetStartTournament,\r\n        SetRegisterTournament,\r\n        SetCreateTournmant,\r\n        GetUserInfo,\r\n        UpdateUserInfo,\r\n        SetUserSetting,\r\n        SetGameIdDeletedAlert,\r\n        SetUserlocation,\r\n        UpdateUserLocation,\r\n        UpdateUserPassword,\r\n        SetUserPassword,\r\n        GetAllUserFalcon,\r\n        SetSwitchUsers,\r\n        SetPersonalInfo,\r\n        UpdateUsersByAdmin,\r\n        SetEditUserByAdmin,\r\n        UpdatePasswordByAdmin,\r\n        SetEditUserPassByAdmin,\r\n        GetTournamentById,\r\n        GetRankAndPointOfTournament,\r\n        GetPreviousTournamentsById,\r\n        GetOtherStatisticByUserId,\r\n        GetFifaUsersByTournamentId,\r\n        CreateItemInFifaResult,\r\n        GetFifaResultByTournamentId,\r\n        SetGameIdTab,\r\n        GetAllTeamUsers,\r\n        RegisterTournmentForThisTeam,\r\n        GetUsersOfSpecificTeam,\r\n        ConfirmTournmentByUser,\r\n        GetAllTeamAndMembers\r\n\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TestContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TestState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}