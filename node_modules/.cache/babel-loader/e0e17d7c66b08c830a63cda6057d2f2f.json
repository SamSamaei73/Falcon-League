{"ast":null,"code":"var _jsxFileName = \"/Users/samsamaei/Documents/Projects/falcon/src/Context/testState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport TestContext from \"./testContext\";\nimport TestReducer from \"./testReducer\";\nimport { SERVER_URL } from \"./constant\";\nimport setAuthToken from \"../Components/Tools/setAuthToken\";\nimport { CREATE_ITEM_IN_USER_SUCCESS, CREATE_ITEM_IN_USER_FAIL, GET_USER_BY_ID_SUCCESS, GET_USER_BY_ID_FAIL, SET_POPUP, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS, GET_COUNTRIES_SUCCESS, GET_COUNTRIES_FAIL, UPDATE_VERIFICATION_SUCCESS, UPDATE_VERIFICATION_FAIL, SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS, SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL, UPDATE_PASSWORD_SPECIFIC_USER_FAIL, UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS, SET_SHOW_GAME_ITEMS_SUCCESS, SET_DISPLAY_RFP_SUCCESS, CREATE_DATA_USER_SUCCESS, CREATE_DATA_USER_FAIL, SET_USERNAMEGAME, GET_GAME_ID_INFO_SUCCESS, GET_GAME_ID_INFO_FAIL, DELETE_GAME_ID_SUCCESS, DELETE_GAME_ID_FAIL, CREATE_TOURNAMENT_SUCCESS, CREATE_TOURNAMENT_FAIL, ACTIVE_TOURNAMENT_SUCCESS, ACTIVE_TOURNAMENT_FAIL, PREVIOUS_TOURNAMENT_SUCCESS, PREVIOUS_TOURNAMENT_FAIL, DELETE_TOURNAMENT_SUCCESS, DELETE_TOURNAMENT_FAIL, CREATE_REGISTER_GAME_SUCCESS, CREATE_REGISTER_GAME_FAIL, GET_REGISTER_USER_TOURNAMENT_SUCCESS, GET_REGISTER_USER_TOURNAMENT_FAIL, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAIL, SET_START_TOURNAMENT, SET_REGISTER_TOURNAMENT, SET_CREATE_TOURNAMENT, GET_USER_INFO_SUCCESS, GET_USER_INFO_FAIL, UPDATE_USER_INFO_SUCCESS, UPDATE_USER_INFO_FAIL, SET_USER_SETTING, SET_GAME_ID_DELETED_TOURNAMENT, SET_USER_LOCATIN_TOURNAMENT, UPDATE_USER_LOCATION_SUCCESS, UPDATE_USER_LOCATIONO_FAIL, UPDATE_USER_PASSWORD_SUCCESS, UPDATE_USER_PASSWORD_FAIL, SET_USER_PASSWORD, GET_ALL_USER_FALCON_SUCCESS, GET_ALL_USER_FALCON_FAIL, SET_SWITCH_USERS, SET_PERSONAL_INFO, UPDATE_USERS_BY_ADMIN_SUCCESS, UPDATE_USERS_BY_ADMIN_FAIL } from \"./types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestState = props => {\n  _s();\n\n  const initialState = {\n    token: localStorage.getItem(\"token\"),\n    err: null,\n    selectedDate: null,\n    createdItemInUserData: null,\n    userByIdData: null,\n    logedinUserData: null,\n    popupAlertData: null,\n    countriesData: null,\n    updateVerificationData: null,\n    sendEmailForChangePasswordData: null,\n    updatePasswordSpecificUserData: null,\n    ShowGameItem: null,\n    checkUserData: null,\n    usernameGameData: null,\n    gameIdInfoData: null,\n    isAuthenticated: null,\n    deleteGameIdData: null,\n    loading: false,\n    user: null,\n    createTournamentData: null,\n    activeTournamentData: [],\n    previousTournamentData: [],\n    deletedTournamentData: null,\n    registerGameUserData: null,\n    registerForThisGameData: null,\n    startTournmentData: null,\n    setCreateTournamennull: null,\n    userInfoData: null,\n    updateUserData: null,\n    updateUserLocationData: null,\n    updateUserPasswordData: null,\n    allUserFalconData: null,\n    personalInfoData: null,\n    switchBetweenUserAndPersonalInfo: true,\n    usersEditByAdmin: null\n  };\n  const [state, dispatch] = useReducer(TestReducer, initialState);\n\n  const SetShowGamelItems = async (showorhide, displayStyle) => {\n    dispatch({\n      type: SET_SHOW_GAME_ITEMS_SUCCESS,\n      payload: showorhide\n    });\n    dispatch({\n      type: SET_DISPLAY_RFP_SUCCESS,\n      payload: displayStyle\n    });\n  };\n\n  const SetUsername = async data => {\n    try {\n      await dispatch({\n        type: SET_USERNAMEGAME,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetPersonalInfo = async data => {\n    try {\n      await dispatch({\n        type: SET_PERSONAL_INFO,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetSwitchUsers = async data => {\n    try {\n      await dispatch({\n        type: SET_SWITCH_USERS,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetPopup = async data => {\n    try {\n      await dispatch({\n        type: SET_POPUP,\n        payload: data\n      });\n    } catch (err) {}\n  };\n\n  const SetStartTournament = async data => {\n    try {\n      await dispatch({\n        type: SET_START_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserlocation = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_LOCATIN_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetRegisterTournament = async data => {\n    try {\n      await dispatch({\n        type: SET_REGISTER_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetGameIdDeletedAlert = async data => {\n    try {\n      await dispatch({\n        type: SET_GAME_ID_DELETED_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserSetting = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_SETTING,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetCreateTournmant = async data => {\n    try {\n      await dispatch({\n        type: SET_CREATE_TOURNAMENT,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const SetUserPassword = async data => {\n    try {\n      await dispatch({\n        type: SET_USER_PASSWORD,\n        payload: null\n      });\n    } catch (err) {}\n  };\n\n  const loadUser = async () => {\n    setAuthToken(localStorage.token);\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/auth\");\n      console.log(\"auth data res\", res.data);\n      await dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  };\n\n  const CheckUserExist = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CheckUserExist/\", frmData, config);\n      dispatch({\n        type: CREATE_DATA_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_DATA_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const CreateItemInUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CreateItemInUser/\", frmData, config);\n      dispatch({\n        type: CREATE_ITEM_IN_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_ITEM_IN_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUsersByAdmin = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUserForAdmin\", frmData, config);\n      dispatch({\n        type: UPDATE_USERS_BY_ADMIN_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USERS_BY_ADMIN_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserPassword = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_PASSWORD_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_PASSWORD_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserLocation = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_LOCATION_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_LOCATIONO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateUserInfo = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateItemInUser\", frmData, config);\n      dispatch({\n        type: UPDATE_USER_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_USER_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const DeleteTournament = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/DeleteTournament/\", frmData, config);\n      dispatch({\n        type: DELETE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: DELETE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetUserInfo = async () => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetUserInfo/\", config);\n      dispatch({\n        type: GET_USER_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_USER_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllUserFalcon = async () => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllUsers/\", config);\n      dispatch({\n        type: GET_ALL_USER_FALCON_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_ALL_USER_FALCON_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetRegisterTournment = async () => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/RegisteredTournmentsForThisUser/\", config);\n      dispatch({\n        type: GET_REGISTER_USER_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_REGISTER_USER_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetPreviousTournaments = async id => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetPreviousTournaments/\" + id, config);\n      dispatch({\n        type: PREVIOUS_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: PREVIOUS_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetActiveTournaments = async id => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetActiveTournaments/\" + id, config);\n      dispatch({\n        type: ACTIVE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: ACTIVE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const RegisterUserForGame = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/RegisterTournmentForThisUser/\", frmData, config);\n      dispatch({\n        type: CREATE_REGISTER_GAME_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_REGISTER_GAME_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const StartTournment = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/StartTournmentForThisUser/\", frmData, config);\n      dispatch({\n        type: START_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: START_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const CreateTournament = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/CreateTournament/\", frmData, config);\n      dispatch({\n        type: CREATE_TOURNAMENT_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: CREATE_TOURNAMENT_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const SendEmailForChangePassword = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/SendEmailForChangePassword/\", frmData, config);\n      dispatch({\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetAllUserAccounts = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetAllUserAccounts/\", config);\n      dispatch({\n        type: GET_GAME_ID_INFO_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_GAME_ID_INFO_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const DeleteAccountOfUser = async frmData => {\n    setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    console.log(\"delet2\", frmData);\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/DeleteAccountOfUser/\", frmData, config);\n      console.log(\"delet\", res.data);\n      dispatch({\n        type: DELETE_GAME_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: DELETE_GAME_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdatePasswordSpecificUser = async frmData => {\n    // setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdatePasswordSpecificUser/\", frmData, config);\n      dispatch({\n        type: UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetUserInfoById = async id => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        id: id\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetLoggedInUser/\", config);\n      dispatch({\n        type: GET_USER_BY_ID_SUCCESS,\n        payload: res.data\n      }); // })\n    } catch (err) {\n      dispatch({\n        type: GET_USER_BY_ID_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const GetCountries = async () => {\n    //setAuthToken(localStorage.token);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.get(SERVER_URL + \"/GetCountries/\", config);\n      dispatch({\n        type: GET_COUNTRIES_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: GET_COUNTRIES_FAIL,\n        payload: err\n      });\n    }\n  };\n\n  const UpdateVerification = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/UpdateVerification\", formData, config);\n      dispatch({\n        type: UPDATE_VERIFICATION_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: UPDATE_VERIFICATION_FAIL,\n        payload: err.response\n      });\n    }\n  }; // Login User\n\n\n  const login = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(SERVER_URL + \"/login\", formData, config);\n      console.log(\"login:\", res.data.token);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      console.log(\"loginerror:\", err);\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response\n      });\n    }\n  }; // Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear Errors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  return /*#__PURE__*/_jsxDEV(TestContext.Provider, {\n    value: {\n      token: state.token,\n      err: state.err,\n      createdItemInUserData: state.createdItemInUserData,\n      userByIdData: state.userByIdData,\n      logedinUserData: state.logedinUserData,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      user: state.user,\n      popupAlertData: state.popupAlertData,\n      countriesData: state.countriesData,\n      updateVerificationData: state.updateVerificationData,\n      sendEmailForChangePasswordData: state.sendEmailForChangePasswordData,\n      updatePasswordSpecificUserData: state.updatePasswordSpecificUserData,\n      ShowGameItem: state.ShowGameItem,\n      checkUserData: state.checkUserData,\n      usernameGameData: state.usernameGameData,\n      gameIdInfoData: state.gameIdInfoData,\n      deleteGameIdData: state.deleteGameIdData,\n      createTournamentData: state.createTournamentData,\n      activeTournamentData: state.activeTournamentData,\n      previousTournamentData: state.previousTournamentData,\n      deletedTournamentData: state.deletedTournamentData,\n      registerGameUserData: state.registerGameUserData,\n      registerForThisGameData: state.registerForThisGameData,\n      startTournmentData: state.startTournmentData,\n      setCreateTournamennull: state.setCreateTournamennull,\n      userInfoData: state.userInfoData,\n      updateUserData: state.updateUserData,\n      updateUserLocationData: state.updateUserLocationData,\n      updateUserPasswordData: state.updateUserPasswordData,\n      allUserFalconData: state.allUserFalconData,\n      switchBetweenUserAndPersonalInfo: state.switchBetweenUserAndPersonalInfo,\n      personalInfoData: state.personalInfoData,\n      usersEditByAdmin: state.usersEditByAdmin,\n      CreateItemInUser,\n      GetUserInfoById,\n      login,\n      loadUser,\n      logout,\n      clearErrors,\n      GetAllUserAccounts,\n      SetPopup,\n      GetCountries,\n      UpdateVerification,\n      SendEmailForChangePassword,\n      UpdatePasswordSpecificUser,\n      SetShowGamelItems,\n      CheckUserExist,\n      SetUsername,\n      DeleteAccountOfUser,\n      CreateTournament,\n      GetActiveTournaments,\n      GetPreviousTournaments,\n      DeleteTournament,\n      RegisterUserForGame,\n      GetRegisterTournment,\n      StartTournment,\n      SetStartTournament,\n      SetRegisterTournament,\n      SetCreateTournmant,\n      GetUserInfo,\n      UpdateUserInfo,\n      SetUserSetting,\n      SetGameIdDeletedAlert,\n      SetUserlocation,\n      UpdateUserLocation,\n      UpdateUserPassword,\n      SetUserPassword,\n      GetAllUserFalcon,\n      SetSwitchUsers,\n      SetPersonalInfo\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 822,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = TestState;\nexport default TestState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestState\");","map":{"version":3,"names":["React","useReducer","axios","TestContext","TestReducer","SERVER_URL","setAuthToken","CREATE_ITEM_IN_USER_SUCCESS","CREATE_ITEM_IN_USER_FAIL","GET_USER_BY_ID_SUCCESS","GET_USER_BY_ID_FAIL","SET_POPUP","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","GET_COUNTRIES_SUCCESS","GET_COUNTRIES_FAIL","UPDATE_VERIFICATION_SUCCESS","UPDATE_VERIFICATION_FAIL","SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS","SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL","UPDATE_PASSWORD_SPECIFIC_USER_FAIL","UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS","SET_SHOW_GAME_ITEMS_SUCCESS","SET_DISPLAY_RFP_SUCCESS","CREATE_DATA_USER_SUCCESS","CREATE_DATA_USER_FAIL","SET_USERNAMEGAME","GET_GAME_ID_INFO_SUCCESS","GET_GAME_ID_INFO_FAIL","DELETE_GAME_ID_SUCCESS","DELETE_GAME_ID_FAIL","CREATE_TOURNAMENT_SUCCESS","CREATE_TOURNAMENT_FAIL","ACTIVE_TOURNAMENT_SUCCESS","ACTIVE_TOURNAMENT_FAIL","PREVIOUS_TOURNAMENT_SUCCESS","PREVIOUS_TOURNAMENT_FAIL","DELETE_TOURNAMENT_SUCCESS","DELETE_TOURNAMENT_FAIL","CREATE_REGISTER_GAME_SUCCESS","CREATE_REGISTER_GAME_FAIL","GET_REGISTER_USER_TOURNAMENT_SUCCESS","GET_REGISTER_USER_TOURNAMENT_FAIL","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAIL","SET_START_TOURNAMENT","SET_REGISTER_TOURNAMENT","SET_CREATE_TOURNAMENT","GET_USER_INFO_SUCCESS","GET_USER_INFO_FAIL","UPDATE_USER_INFO_SUCCESS","UPDATE_USER_INFO_FAIL","SET_USER_SETTING","SET_GAME_ID_DELETED_TOURNAMENT","SET_USER_LOCATIN_TOURNAMENT","UPDATE_USER_LOCATION_SUCCESS","UPDATE_USER_LOCATIONO_FAIL","UPDATE_USER_PASSWORD_SUCCESS","UPDATE_USER_PASSWORD_FAIL","SET_USER_PASSWORD","GET_ALL_USER_FALCON_SUCCESS","GET_ALL_USER_FALCON_FAIL","SET_SWITCH_USERS","SET_PERSONAL_INFO","UPDATE_USERS_BY_ADMIN_SUCCESS","UPDATE_USERS_BY_ADMIN_FAIL","TestState","props","initialState","token","localStorage","getItem","err","selectedDate","createdItemInUserData","userByIdData","logedinUserData","popupAlertData","countriesData","updateVerificationData","sendEmailForChangePasswordData","updatePasswordSpecificUserData","ShowGameItem","checkUserData","usernameGameData","gameIdInfoData","isAuthenticated","deleteGameIdData","loading","user","createTournamentData","activeTournamentData","previousTournamentData","deletedTournamentData","registerGameUserData","registerForThisGameData","startTournmentData","setCreateTournamennull","userInfoData","updateUserData","updateUserLocationData","updateUserPasswordData","allUserFalconData","personalInfoData","switchBetweenUserAndPersonalInfo","usersEditByAdmin","state","dispatch","SetShowGamelItems","showorhide","displayStyle","type","payload","SetUsername","data","SetPersonalInfo","SetSwitchUsers","SetPopup","SetStartTournament","SetUserlocation","SetRegisterTournament","SetGameIdDeletedAlert","SetUserSetting","SetCreateTournmant","SetUserPassword","loadUser","res","get","console","log","CheckUserExist","frmData","config","headers","post","CreateItemInUser","UpdateUsersByAdmin","UpdateUserPassword","UpdateUserLocation","UpdateUserInfo","DeleteTournament","GetUserInfo","GetAllUserFalcon","GetRegisterTournment","GetPreviousTournaments","id","GetActiveTournaments","RegisterUserForGame","StartTournment","CreateTournament","SendEmailForChangePassword","GetAllUserAccounts","DeleteAccountOfUser","UpdatePasswordSpecificUser","GetUserInfoById","GetCountries","UpdateVerification","formData","response","login","logout","clearErrors","children"],"sources":["/Users/samsamaei/Documents/Projects/falcon/src/Context/testState.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport TestContext from \"./testContext\";\r\nimport TestReducer from \"./testReducer\";\r\nimport { SERVER_URL } from \"./constant\";\r\nimport setAuthToken from \"../Components/Tools/setAuthToken\";\r\nimport {\r\n  CREATE_ITEM_IN_USER_SUCCESS,\r\n  CREATE_ITEM_IN_USER_FAIL,\r\n  GET_USER_BY_ID_SUCCESS,\r\n  GET_USER_BY_ID_FAIL,\r\n  SET_POPUP,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  CLEAR_ERRORS,\r\n  GET_COUNTRIES_SUCCESS,\r\n  GET_COUNTRIES_FAIL,\r\n  UPDATE_VERIFICATION_SUCCESS,\r\n  UPDATE_VERIFICATION_FAIL,\r\n  SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\r\n  SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\r\n  UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\r\n  UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\r\n  SET_SHOW_GAME_ITEMS_SUCCESS,\r\n  SET_DISPLAY_RFP_SUCCESS,\r\n  CREATE_DATA_USER_SUCCESS,\r\n  CREATE_DATA_USER_FAIL,\r\n  SET_USERNAMEGAME,\r\n  GET_GAME_ID_INFO_SUCCESS,\r\n  GET_GAME_ID_INFO_FAIL,\r\n  DELETE_GAME_ID_SUCCESS,\r\n  DELETE_GAME_ID_FAIL,\r\n  CREATE_TOURNAMENT_SUCCESS,\r\n  CREATE_TOURNAMENT_FAIL,\r\n  ACTIVE_TOURNAMENT_SUCCESS,\r\n  ACTIVE_TOURNAMENT_FAIL,\r\n  PREVIOUS_TOURNAMENT_SUCCESS,\r\n  PREVIOUS_TOURNAMENT_FAIL,\r\n  DELETE_TOURNAMENT_SUCCESS,\r\n  DELETE_TOURNAMENT_FAIL,\r\n  CREATE_REGISTER_GAME_SUCCESS,\r\n  CREATE_REGISTER_GAME_FAIL,\r\n  GET_REGISTER_USER_TOURNAMENT_SUCCESS,\r\n  GET_REGISTER_USER_TOURNAMENT_FAIL,\r\n  START_TOURNAMENT_SUCCESS,\r\n  START_TOURNAMENT_FAIL,\r\n  SET_START_TOURNAMENT,\r\n  SET_REGISTER_TOURNAMENT,\r\n  SET_CREATE_TOURNAMENT,\r\n  GET_USER_INFO_SUCCESS,\r\n  GET_USER_INFO_FAIL,\r\n  UPDATE_USER_INFO_SUCCESS,\r\n  UPDATE_USER_INFO_FAIL,\r\n  SET_USER_SETTING,\r\n  SET_GAME_ID_DELETED_TOURNAMENT,\r\n  SET_USER_LOCATIN_TOURNAMENT,\r\n  UPDATE_USER_LOCATION_SUCCESS,\r\n  UPDATE_USER_LOCATIONO_FAIL,\r\n  UPDATE_USER_PASSWORD_SUCCESS,\r\n  UPDATE_USER_PASSWORD_FAIL,\r\n  SET_USER_PASSWORD,\r\n  GET_ALL_USER_FALCON_SUCCESS,\r\n  GET_ALL_USER_FALCON_FAIL,\r\n  SET_SWITCH_USERS,\r\n  SET_PERSONAL_INFO,\r\n  UPDATE_USERS_BY_ADMIN_SUCCESS,\r\n  UPDATE_USERS_BY_ADMIN_FAIL,\r\n} from \"./types\";\r\n\r\nconst TestState = (props) => {\r\n  const initialState = {\r\n    token: localStorage.getItem(\"token\"),\r\n    err: null,\r\n    selectedDate: null,\r\n    createdItemInUserData: null,\r\n    userByIdData: null,\r\n    logedinUserData: null,\r\n    popupAlertData: null,\r\n    countriesData: null,\r\n    updateVerificationData: null,\r\n    sendEmailForChangePasswordData: null,\r\n    updatePasswordSpecificUserData: null,\r\n    ShowGameItem: null,\r\n    checkUserData: null,\r\n    usernameGameData: null,\r\n    gameIdInfoData: null,\r\n    isAuthenticated: null,\r\n    deleteGameIdData: null,\r\n    loading: false,\r\n    user: null,\r\n    createTournamentData: null,\r\n    activeTournamentData: [],\r\n    previousTournamentData: [],\r\n    deletedTournamentData: null,\r\n    registerGameUserData: null,\r\n    registerForThisGameData: null,\r\n    startTournmentData: null,\r\n    setCreateTournamennull: null,\r\n    userInfoData: null,\r\n    updateUserData: null,\r\n    updateUserLocationData: null,\r\n    updateUserPasswordData: null,\r\n    allUserFalconData: null,\r\n    personalInfoData: null,\r\n    switchBetweenUserAndPersonalInfo:true,\r\n    usersEditByAdmin: null,\r\n\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(TestReducer, initialState);\r\n  const SetShowGamelItems = async (showorhide, displayStyle) => {\r\n    dispatch({\r\n      type: SET_SHOW_GAME_ITEMS_SUCCESS,\r\n      payload: showorhide,\r\n    });\r\n\r\n    dispatch({\r\n      type: SET_DISPLAY_RFP_SUCCESS,\r\n      payload: displayStyle,\r\n    });\r\n  };\r\n  const SetUsername = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USERNAMEGAME,\r\n        payload: data,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const SetPersonalInfo = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_PERSONAL_INFO,\r\n        payload: data,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const SetSwitchUsers = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_SWITCH_USERS,\r\n        payload: data,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n  const SetPopup = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_POPUP,\r\n        payload: data,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n  const SetStartTournament = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_START_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n  const SetUserlocation = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_LOCATIN_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const SetRegisterTournament = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_REGISTER_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n  const SetGameIdDeletedAlert = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_GAME_ID_DELETED_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const SetUserSetting = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_SETTING,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n  const SetCreateTournmant = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_CREATE_TOURNAMENT,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n  const SetUserPassword = async (data) => {\r\n    try {\r\n      await dispatch({\r\n        type: SET_USER_PASSWORD,\r\n        payload: null,\r\n      });\r\n    } catch (err) {}\r\n  };\r\n\r\n\r\n  const loadUser = async () => {\r\n    setAuthToken(localStorage.token);\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/auth\");\r\n      console.log(\"auth data res\", res.data);\r\n      await dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({ type: AUTH_ERROR });\r\n    }\r\n  };\r\n  const CheckUserExist = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CheckUserExist/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_DATA_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_DATA_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const CreateItemInUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CreateItemInUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_ITEM_IN_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_ITEM_IN_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUsersByAdmin = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUserForAdmin\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USERS_BY_ADMIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USERS_BY_ADMIN_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserPassword = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_PASSWORD_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_PASSWORD_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserLocation = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_LOCATION_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_LOCATIONO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateUserInfo = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateItemInUser\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_USER_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_USER_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const DeleteTournament = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/DeleteTournament/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: DELETE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n\r\n  const GetUserInfo = async () => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetUserInfo/\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_USER_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_USER_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllUserFalcon = async () => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetAllUsers/\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_ALL_USER_FALCON_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_ALL_USER_FALCON_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetRegisterTournment = async () => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/RegisteredTournmentsForThisUser/\",\r\n        config\r\n      );\r\n      dispatch({\r\n        type: GET_REGISTER_USER_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_REGISTER_USER_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetPreviousTournaments = async (id) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetPreviousTournaments/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: PREVIOUS_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PREVIOUS_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetActiveTournaments = async (id) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(\r\n        SERVER_URL + \"/GetActiveTournaments/\" + id,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: ACTIVE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: ACTIVE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const RegisterUserForGame = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/RegisterTournmentForThisUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_REGISTER_GAME_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_REGISTER_GAME_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const StartTournment = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/StartTournmentForThisUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: START_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: START_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const CreateTournament = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/CreateTournament/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: CREATE_TOURNAMENT_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const SendEmailForChangePassword = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/SendEmailForChangePassword/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: SEND_EMAIL_FOR_CHANGE_PASSWORD_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetAllUserAccounts = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetAllUserAccounts/\", config);\r\n      dispatch({\r\n        type: GET_GAME_ID_INFO_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_GAME_ID_INFO_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const DeleteAccountOfUser = async (frmData) => {\r\n    setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    console.log(\"delet2\", frmData);\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/DeleteAccountOfUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      console.log(\"delet\", res.data);\r\n      dispatch({\r\n        type: DELETE_GAME_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: DELETE_GAME_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdatePasswordSpecificUser = async (frmData) => {\r\n    // setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdatePasswordSpecificUser/\",\r\n        frmData,\r\n        config\r\n      );\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_SPECIFIC_USER_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_PASSWORD_SPECIFIC_USER_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetUserInfoById = async (id) => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        id: id,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetLoggedInUser/\", config);\r\n      dispatch({\r\n        type: GET_USER_BY_ID_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      // })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_USER_BY_ID_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const GetCountries = async () => {\r\n    //setAuthToken(localStorage.token);\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.get(SERVER_URL + \"/GetCountries/\", config);\r\n      dispatch({\r\n        type: GET_COUNTRIES_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GET_COUNTRIES_FAIL,\r\n        payload: err,\r\n      });\r\n    }\r\n  };\r\n  const UpdateVerification = async (formData) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        SERVER_URL + \"/UpdateVerification\",\r\n        formData,\r\n        config\r\n      );\r\n\r\n      dispatch({\r\n        type: UPDATE_VERIFICATION_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      loadUser();\r\n    } catch (err) {\r\n      dispatch({\r\n        type: UPDATE_VERIFICATION_FAIL,\r\n        payload: err.response,\r\n      });\r\n    }\r\n  };\r\n  // Login User\r\n  const login = async (formData) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(SERVER_URL + \"/login\", formData, config);\r\n      console.log(\"login:\", res.data.token);\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      });\r\n      loadUser();\r\n    } catch (err) {\r\n      console.log(\"loginerror:\", err);\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n        payload: err.response,\r\n      });\r\n    }\r\n  };\r\n  // Logout\r\n  const logout = () => dispatch({ type: LOGOUT });\r\n  // Clear Errors\r\n  const clearErrors = () => dispatch({ type: CLEAR_ERRORS });\r\n\r\n  return (\r\n    <TestContext.Provider\r\n      value={{\r\n        token: state.token,\r\n        err: state.err,\r\n        createdItemInUserData: state.createdItemInUserData,\r\n        userByIdData: state.userByIdData,\r\n        logedinUserData: state.logedinUserData,\r\n        isAuthenticated: state.isAuthenticated,\r\n        loading: state.loading,\r\n        user: state.user,\r\n        popupAlertData: state.popupAlertData,\r\n        countriesData: state.countriesData,\r\n        updateVerificationData: state.updateVerificationData,\r\n        sendEmailForChangePasswordData: state.sendEmailForChangePasswordData,\r\n        updatePasswordSpecificUserData: state.updatePasswordSpecificUserData,\r\n        ShowGameItem: state.ShowGameItem,\r\n        checkUserData: state.checkUserData,\r\n        usernameGameData: state.usernameGameData,\r\n        gameIdInfoData: state.gameIdInfoData,\r\n        deleteGameIdData: state.deleteGameIdData,\r\n        createTournamentData: state.createTournamentData,\r\n        activeTournamentData: state.activeTournamentData,\r\n        previousTournamentData: state.previousTournamentData,\r\n        deletedTournamentData: state.deletedTournamentData,\r\n        registerGameUserData: state.registerGameUserData,\r\n        registerForThisGameData: state.registerForThisGameData,\r\n        startTournmentData: state.startTournmentData,\r\n        setCreateTournamennull: state.setCreateTournamennull,\r\n        userInfoData: state.userInfoData,\r\n        updateUserData: state.updateUserData,\r\n        updateUserLocationData: state.updateUserLocationData,\r\n        updateUserPasswordData: state.updateUserPasswordData,\r\n        allUserFalconData: state.allUserFalconData,\r\n        switchBetweenUserAndPersonalInfo: state.switchBetweenUserAndPersonalInfo,\r\n        personalInfoData: state.personalInfoData,\r\n        usersEditByAdmin: state.usersEditByAdmin,\r\n\r\n        CreateItemInUser,\r\n        GetUserInfoById,\r\n        login,\r\n        loadUser,\r\n        logout,\r\n        clearErrors,\r\n        GetAllUserAccounts,\r\n        SetPopup,\r\n        GetCountries,\r\n        UpdateVerification,\r\n        SendEmailForChangePassword,\r\n        UpdatePasswordSpecificUser,\r\n        SetShowGamelItems,\r\n        CheckUserExist,\r\n        SetUsername,\r\n        DeleteAccountOfUser,\r\n        CreateTournament,\r\n        GetActiveTournaments,\r\n        GetPreviousTournaments,\r\n        DeleteTournament,\r\n        RegisterUserForGame,\r\n        GetRegisterTournment,\r\n        StartTournment,\r\n        SetStartTournament,\r\n        SetRegisterTournament,\r\n        SetCreateTournmant,\r\n        GetUserInfo,\r\n        UpdateUserInfo,\r\n        SetUserSetting,\r\n        SetGameIdDeletedAlert,\r\n        SetUserlocation,\r\n        UpdateUserLocation,\r\n        UpdateUserPassword,\r\n        SetUserPassword,\r\n        GetAllUserFalcon,\r\n        SetSwitchUsers,\r\n        SetPersonalInfo,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TestContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TestState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}